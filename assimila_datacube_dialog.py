# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AssimilaDatacCubeDialog
                                 A QGIS plugin
 This plugin let's you visualise the datacube.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-08-07
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Assimila
        email                : jenny.lin@assimila.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import math,  os,  tempfile
from os.path import expanduser
from qgis.core import *
from qgis.PyQt import uic
from qgis.PyQt import QtNetwork
from qgis.PyQt.QtCore import pyqtSlot,  Qt,  QUrl,  QFileInfo
from qgis.PyQt.QtGui import QIntValidator
from qgis.PyQt.QtWidgets import *
from qgis.PyQt import QtWidgets
from qgis.core import (QgsProcessingParameterString,)
from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply,  QNetworkAccessManager

from .nesw_dialog import Ui_NESW_Dialog
from .canvas_dialog import Ui_canvas_Dialog
from .search_dialog import Ui_search_Dialog

from qgis.core import *
from qgis.gui import QgsMapCanvas
from qgis.utils import iface


"""
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from matplotlib.offsetbox import AnchoredText
"""

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'assimila_datacube_dialog_base.ui'))


class AssimilaDatacCubeDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        super(AssimilaDatacCubeDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        #self.nesw_radioButton.toggled.connect(self.on_nesw_radioButton_clicked)
        #self.set_canvas_radioButton.toggled.connect(self.on_set_canvas_radioButton_clicked)
        #self.search_tile_radioButton.toggled.connect(self.on_search_tile_radioButton_clicked)

    
    def update_map(self):
        """
        ax = plt.axes(projection=ccrs.PlateCarree())
        ax.set_extent([180, -180, -90, 90])
        ax.add_feature(cfeature.LAND)
        ax.add_feature(cfeature.OCEAN)
        ax.add_feature(cfeature.COASTLINE)
        #self.MplWidget.canvas.add_subplot(111)
        #plt.show()
        self.MplWidget.canvas.draw()
        ds.close()
        """

        print("updating map")
        canvas = QgsMapCanvas()
        print(canvas.mapTool)
        #r = QgsRubberBand(canvas, True)  # True = a polygon
        #points = [[QgsPoint(-1, -1), QgsPoint(0, 1), QgsPoint(1, -1)]]
        #r.setToGeometry(QgsGeometry.fromPolygon(points), None)
        """
        layer = QgsVectorLayer(path, name, provider)
        if not layer.isValid():
            raise IOError ("Failed to open the layer")

        # add layer to the registry
        QgsMapLayerRegistry.instance().addMapLayer(layer)

        # set extent to the extent of our layer
        canvas.setExtent(layer.extent())

        # set the map canvas layer set
        canvas.setLayerSet([QgsMapCanvasLayer(layer)])
        """
        #self.canvas = QgsMapCanvas()
        #self.canvas.setCanvasColor(Qt.white)
       # self.canvas.setExtent(layer.extent())
        #self.canvas.setLayerSet([QgsMapCanvasLayer(layer)])

        #print(canvas)
       # canvas.setCanvasColor(Qt.black)
        #canvas.enableAntiAliasing(True)
       # canvas.show()
        canvas = iface.mapCanvas()
        print(canvas.size())
        canvas.show()


        #self.mAreaCanvas.setLayers(self.mapLayers)
        #self.mAreaCanvas.zoomToFullExtent()
        #super().show()
    """
    @pyqtSlot()
    def on_nesw_radioButton_clicked(self):
        print("nesw clicked")
        NESW_Dialog = QtWidgets.QDialog()
        ui = Ui_NESW_Dialog()
        ui.setupUi(NESW_Dialog)
        res = NESW_Dialog.exec_()
        if res == QtWidgets.QDialog.Accepted:
            print("Ok button was clicked")
            coordinates = ui.get_values()
            print(coordinates)
            self.add_coordinates_to_UI(coordinates)
            ui.accept()
        else:
            print("cancelled was clicked")
            ui.reject()
    
    @pyqtSlot()  
    def on_set_canvas_radioButton_clicked(self):
        print("set canvas clicked")
        canvas_Dialog = QtWidgets.QDialog()
        ui = Ui_canvas_Dialog()
        ui.setupUi(self.iface, canvas_Dialog)
        res = canvas_Dialog.exec_()
        if res == QtWidgets.QDialog.Accepted:
            print("Ok button was clicked")
            coordinates = ui.get_values()
            print(coordinates)
            self.add_coordinates_to_UI(coordinates)
        else:
            print("cancelled was clicked")

    @pyqtSlot()
    def on_search_tile_radioButton_clicked(self):
        print("search tile clicked")
        search_Dialog = QtWidgets.QDialog()
        ui = Ui_search_Dialog()
        ui.setupUi(search_Dialog)
        res = search_Dialog.exec_()
        if res == QtWidgets.QDialog.Accepted:
            print("Ok button was clicked")
            coordinates = ui.get_values()
            print(coordinates)
            self.add_coordinates_to_UI(coordinates)
        else:
            print("cancelled was clicked")
   """
    @pyqtSlot()
    def on_btn_browse_keyfile_clicked(self):
        # Gets directory for the keyfile - default: /users/{user_name}/Documents
        self.dir = QFileDialog.getExistingDirectory(None, self.tr("Open Directory"),
                                                    # os.path.dirname(__file__),
                                                    os.path.join(expanduser("~"), "Documents"), # default location
                                                    QFileDialog.ShowDirsOnly 
                                                    | QFileDialog.DontResolveSymlinks)

        # Appends the key file name .assimila_dq to the directory path
        self.key_file = os.path.join(self.dir, ".assimila_dq")       

        # Displays in lineEdit                             
        self.lineEdit.setText(self.key_file)   

    @pyqtSlot()
    def on_btn_browse_rasterfile_clicked(self):
        # Gets default directory for the temporary raster file location
        self.dir = QFileDialog.getExistingDirectory(None, self.tr("Open Directory"),
                                                    #"Users\Jenny\AppData\Local\Temp",
                                                    os.path.join(expanduser("~"), "Documents"),
                                                    QFileDialog.ShowDirsOnly 
                                                    | QFileDialog.DontResolveSymlinks)

        # Displays in lineEdit   "Users\Jenny\AppData\Local\Temp"                        
        self.lineEdit_2.setText(self.dir)
        
    def show_canvas(self):

        new_dialog = QDialog()
        new_dialog.resize(800, 600)

        map_canvas = QgsMapCanvas(new_dialog)
        map_canvas.setMinimumSize(800, 600)

        layers =  QgsProject.instance().mapLayers()
        map_canvas_layer_list = [l for l in layers.values()]
        map_canvas.setLayers(map_canvas_layer_list)
        map_canvas.setExtent(iface.mapCanvas().extent())

        new_dialog.show()